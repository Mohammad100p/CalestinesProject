//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Fantacode Studios/Parkour & Climbing System/Game/Input Manager/ParkourInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ParkourInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ParkourInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ParkourInputAction"",
    ""maps"": [
        {
            ""name"": ""Parkour"",
            ""id"": ""e465ebec-d273-437e-9023-b56e97fad5b9"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""5fe412fd-d19b-4eae-9769-e9172832745e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpFromHang"",
                    ""type"": ""Button"",
                    ""id"": ""611ab7a7-b086-46db-8584-eab109a5e549"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""2fb61c5f-8226-4f2f-8686-285705e01a9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""58e78895-4488-4009-8dcc-932c2c5921cc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f50d629e-d5c5-49aa-904d-b7e2cb27f38d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""762594ab-1c65-43e9-b4bc-9c5e148eae7d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77c6f258-42d7-40a2-933c-66a5b7767fcc"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4badec23-5ab6-4701-b2c8-2e53d194a5dc"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpFromHang"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43293d9e-7dc6-4abb-983e-228165bdc396"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpFromHang"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Parkour
        m_Parkour = asset.FindActionMap("Parkour", throwIfNotFound: true);
        m_Parkour_Jump = m_Parkour.FindAction("Jump", throwIfNotFound: true);
        m_Parkour_JumpFromHang = m_Parkour.FindAction("JumpFromHang", throwIfNotFound: true);
        m_Parkour_Drop = m_Parkour.FindAction("Drop", throwIfNotFound: true);
    }

    ~@ParkourInputAction()
    {
        UnityEngine.Debug.Assert(!m_Parkour.enabled, "This will cause a leak and performance issues, ParkourInputAction.Parkour.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Parkour
    private readonly InputActionMap m_Parkour;
    private List<IParkourActions> m_ParkourActionsCallbackInterfaces = new List<IParkourActions>();
    private readonly InputAction m_Parkour_Jump;
    private readonly InputAction m_Parkour_JumpFromHang;
    private readonly InputAction m_Parkour_Drop;
    public struct ParkourActions
    {
        private @ParkourInputAction m_Wrapper;
        public ParkourActions(@ParkourInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Parkour_Jump;
        public InputAction @JumpFromHang => m_Wrapper.m_Parkour_JumpFromHang;
        public InputAction @Drop => m_Wrapper.m_Parkour_Drop;
        public InputActionMap Get() { return m_Wrapper.m_Parkour; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ParkourActions set) { return set.Get(); }
        public void AddCallbacks(IParkourActions instance)
        {
            if (instance == null || m_Wrapper.m_ParkourActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ParkourActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @JumpFromHang.started += instance.OnJumpFromHang;
            @JumpFromHang.performed += instance.OnJumpFromHang;
            @JumpFromHang.canceled += instance.OnJumpFromHang;
            @Drop.started += instance.OnDrop;
            @Drop.performed += instance.OnDrop;
            @Drop.canceled += instance.OnDrop;
        }

        private void UnregisterCallbacks(IParkourActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @JumpFromHang.started -= instance.OnJumpFromHang;
            @JumpFromHang.performed -= instance.OnJumpFromHang;
            @JumpFromHang.canceled -= instance.OnJumpFromHang;
            @Drop.started -= instance.OnDrop;
            @Drop.performed -= instance.OnDrop;
            @Drop.canceled -= instance.OnDrop;
        }

        public void RemoveCallbacks(IParkourActions instance)
        {
            if (m_Wrapper.m_ParkourActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IParkourActions instance)
        {
            foreach (var item in m_Wrapper.m_ParkourActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ParkourActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ParkourActions @Parkour => new ParkourActions(this);
    public interface IParkourActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnJumpFromHang(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
    }
}
